//#############################################################################
//
// Project			:	Visual.Galaxy.Framework
//
//#############################################################################
//
//-----------------------------------------------------------------------------
// Programmer       :	Main-Author Christian "Tipplin" Kurs
//-----------------------------------------------------------------------------
// Part				:	VGFCore
//-----------------------------------------------------------------------------
// Base Class       :	VGFCore
//-----------------------------------------------------------------------------
// Special          :   migrate Project to .NET 5.0 or higher
//-----------------------------------------------------------------------------
// Copyright © 2017-2021
// by  Visual Galaxy Framework Community Kernel Developer Team.
//-----------------------------------------------------------------------------
// by Head-Author: Christian "Tipplin" Kurs - Visual C# Developer
// Portions Copyright © 2017-2021 by Microsoft Corporation GmbH.
//-----------------------------------------------------------------------------
// Visual Studio Information:
// Following Changes:
// at New NET 5.0 Framework in Solution File
// Visual Studio Version 16
// (Tipplin Note: Visual Studio 2019 Version 16.9.3 April 2021)
// VisualStudioVersion = 16.0.31025.194
// MinimumVisualStudioVersion = 10.0.40219.1
// SolutionName.AssemblyFile.cs
//------------------------------------------------------------------------------
//
//
//==============================================================================
// ! ATTENTION ! at .NET 5.0 or higher Microsoft change Attributes in an Class,
// Solutionname.AssemblyInfo.cs and is automated generated.
// NO changes or anything !
//
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und
//     gehen verloren, wenn der Code erneut generiert wird.
// </auto-generated>
// using System;
// using System.Reflection;
//
//[assembly: System.Reflection.AssemblyCompanyAttribute("Visual.Galaxy.Framework.Community.KernelTeam")]
//[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
//[assembly: System.Reflection.AssemblyCopyrightAttribute("Copyright © 2017-2021 by  Visual Galaxy Framework Community Kernel Developer Team" + ".")]
//[assembly: System.Reflection.AssemblyDescriptionAttribute("Class Framework for great Applications.")]
//[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.6")]
//[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
//[assembly: System.Reflection.AssemblyProductAttribute("Visual.Galaxy.Framework")]
//[assembly: System.Reflection.AssemblyTitleAttribute("Visual.Galaxy.Framework")]
//[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.6")]
//[assembly: System.Reflection.AssemblyMetadataAttribute("RepositoryUrl", "https://github.com/Tipplin/Visual.Galaxy.Framework")]
//[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
//[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]
//
// Von der MSBuild WriteCodeFragment-Klasse generiert.
//
//
//------------------------------------------------------------------------------
// Same sourcecode by Microsoft, so we marked with Copyright !.
// © 1982 - 2021 - Copyrights by Microsoft: Images, Icons, Signs, Gadgets, 
// Copyright © and Tradewark by Microsoft Windows, Windows Logo, Visual Studio
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// VFGCore
// written by 		
//						Christian "Tipplin" Kurs
//						Ahornweg 1
//                 -G - 53177 Bonn
//						Germany - Allemagne - Duitsland
//------------------------------------------------------------------------------
//                  mobile                : 0173 / 4593440
//					e-mail                :	kurschristian@gmail.com
//					community Website     :	
//                  Project-Website       :
//                  https://github.com/Tipplin/Visual.Galaxy.Framework
//-----------------------------------------------------------------------------
// This software is supplied as is. Use it at your own  RISK !!!!.
// Obviously I've tried to do the best job possible.
// If you find any problem with it, let me know.
//
// With any luck, Visual Galaxy Framework will make it obsolete anyway
//----------------------------------------------------------------------------
// License:	
//				NO fee for NON-Commercial use.
//				our License Community Website:
//              in progress
//
//				Honest Business Users, to use our compiled Versions, 
//				please call us to send you our Business Licenses.
//				or our Business Website:
//				in progress
//-----------------------------------------------------------------------------


/*
Translate same Information and License
English

Permission is hereby granted, free of charge, to any person obtaining a copy 
of this software and associated documentation files (the "Software"), 
to deal in the Software without restriction, 
including without limitation the rights to use, copy, modify, merge, publish, 
distribute, sublicense, and/or sell copies of the Software, and 
to permit persons to whom the Software is furnished to do so, 

subject to the following conditions:

The above copyright notice and this permission notice shall be included in 
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-------------------------------------------------------------------------------
German:

Personen, die eine Kopie dieser Software und der dazugehörigen 
Dokumentationsdateien (die "Software") 
erhalten, wird hiermit die kostenlose Erlaubnis erteilt.
uneingeschränkt mit der Software zu handeln, 
einschließlich der Rechte zur Verwendung, zum Kopieren, Ändern, 
Zusammenführen, Veröffentlichen, Verteilen,
Unterlizenzen und / oder Verkauf von Kopien der Software und 
Erlaubnis von Personen, an die die Software geliefert wird,

unter den folgenden Bedingungen:

Der obige Copyright-Hinweis und dieser Erlaubnisschein sind in allen Kopien 
oder wesentlichen Teilen der Software enthalten.

DIE SOFTWARE WIRD "WIE BESEHEN" OHNE JEGLICHE GARANTIE, 
AUSDRÜCKLICH ODER IMPLIZIERT, EINSCHLIESSLICH, 
ABER NICHT BESCHRÄNKT AUF DIE GEWÄHRLEISTUNG DER MARKTFÄHIGKEIT, 
EIGNUNG FÜR EINEN BESTIMMTEN ZWECK UND NICHTVERLETZUNG.

IN KEINEM FALL HAFTEN DIE AUTOREN ODER COPYRIGHT-INHABER FÜR ANSPRÜCHE, 
SCHADEN ODER ANDERE HAFTUNG, WENN SIE AUSSCHLIESSLICH EINES VERTRAGS, 
TORTES ODER ANDERWEITIG SIND, HERAUSGEGEBEN, 
ABER ODER IN VERBINDUNG MIT DER SOFTWARE
ODER DIE NUTZUNG ODER ANDERE ABKOMMEN IN DER SOFTWARE.
-------------------------------------------------------------------------------
Frensh:

Par la présente, une autorisation est accordée gratuitement à toute personne 
obtenant une copie de ce logiciel 
et des fichiers de documentation associée (le "Logiciel"),
traiter le logiciel sans restriction, y compris, sans limitation, 
les droits d'utilisation, de copie, de modification, 
de fusion, de publication, de distribution, sous-licence, 
et / ou vendre des copies du logiciel, 
et permettre aux personnes à qui le logiciel est fourni de le faire,
sous réserve des conditions suivantes:

L'avis de copyright ci-dessus et cet avis de permission 
doivent être inclus dans toutes les copies 
ou parties substantielles du logiciel.

LE LOGICIEL EST FOURNI "EN l’ETAT", SANS AUCUNE GARANTIE, EXPRESSE OU IMPLICITE,
Y COMPRIS, MAIS SANS S'Y LIMITER, LES GARANTIES DE VALEUR MARCHANDE, 
D'ADÉQUATION À UN USAGE PARTICULIER ET D'ABSENCE DE VIOLATION.

EN AUCUN CAS, LES AUTEURS OU LES TITULAIRES DU DROIT D'AUTEUR NE PEUVENT 
ÊTRE TENUS RESPONSABLES DE TOUTE RÉCLAMATION, 
DE DOMMAGES OU D'AUTRE RESPONSABILITÉ
QU'IL SOIT DANS UN ACTION DE CONTRAT, DE LORT OU DE AUTRE FACILITÉ, 
RÉSULTANT DU LOGICIEL, OU NON OU LIÉ AVEC CE LOGICIEL
OU L'UTILISATION OU D'AUTRES TRANSACTIONS DANS LE LOGICIEL.
-------------------------------------------------------------------------------
Spanish:

Por la presente se otorga el permiso, sin cargo, a cualquier persona 
que obtenga una copia de este software y los archivos 
de documentación asociados (el "Software"),
para operar en el Software sin restricciones, incluidos, entre otros, 
los derechos de uso, copia, modificación, combinación, publicación, 
distribución, sublicenciar, y / o vender copias del Software, 
y para permitir que las personas a quienes se suministra el Software lo hagan,
sujeto a las siguientes condiciones:

El aviso de copyright anterior y este aviso de permiso 
se incluirán en todas las copias o partes sustanciales del Software.

EL SOFTWARE SE PROPORCIONA "TAL CUAL", SIN GARANTÍA DE NINGÚN TIPO, 
EXPRESA O IMPLÍCITA, INCLUYENDO PERO NO LIMITADO 
A LAS GARANTÍAS DE COMERCIABILIDAD, 
APTITUD PARA UN PROPÓSITO PARTICULAR Y NO INCUMPLIMIENTO.
EN NINGÚN CASO, LOS AUTORES O TITULARES DE DERECHOS DE AUTOR 
SERÁN RESPONSABLES POR CUALQUIER RECLAMACIÓN, 
DAÑOS U OTRAS RESPONSABILIDADES, SI EN UNA ACCIÓN DE CONTRATO, 
CORTE O DE OTRA MANERA, DERIVADO DE, FUERA DE O EN CONEXIÓN CON EL SOFTWARE
O EL USO O OTROS TRATOS EN EL SOFTWARE.

-------------------------------------------------------------------------------
Italian:

L'autorizzazione è concessa, a titolo gratuito, 
a chiunque ottenga una copia di questo software 
e dei relativi file di documentazione (il "Software"),
trattare il Software senza limitazioni, 
inclusi senza limitazione i diritti di utilizzo, copia, modifica, fusione, 
pubblicazione, distribuzione, 
concedere in sub-licenza e / o vendere copie 
del Software e consentire alle persone a cui è fornito il Software di farlo,
soggetto alle seguenti condizioni:

La suddetta nota sul copyright e questa nota di autorizzazione 
devono essere incluse in tutte le copie o parti sostanziali del Software.

IL SOFTWARE VIENE FORNITO "COSÌ COM'È", SENZA GARANZIA DI ALCUN TIPO, 
ESPRESSA O IMPLICITA, INCLUSE, A TITOLO ESEMPLIFICATIVO, 
LE GARANZIE DI COMMERCIABILITÀ, 
IDONEITÀ PER UN PARTICOLARE SCOPO E NON VIOLAZIONE.

IN NESSUN CASO GLI AUTORI OI DETENTORI DEL COPYRIGHT SARANNO RITENUTI 
RESPONSABILI PER QUALSIASI RECLAMO, DANNO O ALTRO RESPONSABILITÀ,
SE IN UN AZIONE DI CONTRATTO, TORT O ALTRO, DERIVANTE DA, 
FUORI O IN CONNESSIONE CON IL SOFTWARE
OPPURE L'USO O ALTRE RACCOLTE DEL SOFTWARE.


******************************************************************************/

//----------------------------------------------------------------------------
// 
//######################### Visual.Galaxy.Framework ##########################
//#
//# Start Date: 2016/01/01 - 17:00 - Ground Leaning -Initial
//#
//#---------------------------------------------------------------------------
//# Freeze Date: 
//# (FREEZE: like Microsoft - stopp develop, no more codes into project,
//# - but develop goes on - compiling to R T M )
//# Microsoft Developer's have all one or more Platform's for Project's.
//# Microsoft Office, Project, Team Foundation Server... 
//# Microsoft Build Server - all Developer save they code here, test OK! 
//# Build Server bundles that and compile a Daily Build - 
//# like Windows 10 Desktop - B 15002 - 09.01.2017.
//# --------------------------------------------------------------------------
//#
//# ! NOTE ! Develop are going on, new an features in later build.
//#
//#
//#
//#
//############################################################################
//############################################################################


/****************************************************************************** 
 * All System Directives Here !
 ****************************************************************************** 
 */

#region ### All System Assemblies from .NET Framework 5.0

// System for Type or
using System;

using System.IO;

using System.Text;

using System.Diagnostics;

using System.Security;

using System.Security.Principal;
using static System.Security.Principal.WindowsBuiltInRole;

using System.ComponentModel;



#endregion

#region ### Microsoft Assemblies ###

// Use for Registry Methods
using Microsoft.Win32;

#endregion

#region ### Windows Assemblies - most written in Visual C++, Visual C# ###

#endregion


#region ### Own Dependencies about Assemblies - here Visual.Operation.System.dll ###

using static Visual.Operation.System.Native.UnsafeNativeMethods;

using Visual.Operation.System.Base;

using static Visual.Operation.System.Internal.InternalUtilities.VOSInternalUtilities;

using static Visual.Operation.System.Native.NativeRuntimeMethods;

using static Visual.Operation.System.Native.NativeMethods;



using static Visual.Galaxy.Framework.VGFCoreUrls;


#endregion

#region Microsoft Assembly for Windows Operation System

using Microsoft.Windows.Input;


#endregion





// <summary>
// Create here only VGFCore for all other Classes and C# Files.
// </summary>
namespace Visual.Galaxy.Framework
{
    /// <summary>
    /// Class VGFCore - constants, enum, structures
    /// </summary>
    public class VGFCore
    {
        /*
         * See section StringBuilder with different maximum values. 
         * Sets instances here in ClassHead, thats allowed in Visual C#
         * Allowed: enumerators, struct's, instances, constants, file paths,
         * 
         */

        /// <summary>
        /// Constant VGFStandardMessage1 as global in Project.
        /// </summary>
        internal static string VGFStandardMessage1 = "";


        /// <summary>
        /// Constant string with Pathname and Folder for all Trace Log Files
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// @ sign for unicode sign, so only one \ backward slash in Pathname !
        /// / forward slash, see Javascript, HTML, - by Audiocontrol, Videocontrol (Website) as directory who is the Audiofile and Videofile.
        /// <!-- Author 👨Tipplin👨 -->
        internal static string VGFTraceFile = @"C:\Users\Project_Visual_Galaxy_Framework\Logs\Traces\IFTTraceFiles";

        /// <summary>
        /// Constant string with Pathname and Folder for all Console Log Files
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// @ sign for unicode sign, so only one \ backward slash in Pathname !
        /// <!-- Author 👨Tipplin👨 -->
        internal static string VGFConsoleFile = @"C:\Users\Project_Visual_Galaxy_Framework\Logs\Console\ConsoleFiles";

        /// <summary>
        /// Constant string with Pathname and Folder for all System Log Files
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// @ sign for unicode sign, so only one \ backward slash in Pathname !
        /// <!-- Author 👨Tipplin👨 -->
        internal static string VGFSystemFile = @"C:\Users\Project_Visual_Galaxy_Framework\Logs\System\SystemFiles";

        /// <summary>
        /// Constant string with Pathname and Folder for all Framework Log Files
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// @ sign for unicode sign, so only one \ backward slash in Pathname !
        /// <!-- Author 👨Tipplin👨--> 
        internal static string VGFFrameworkFile = @"C:\Users\Project_Visual_Galaxy_Framework\Logs\Framework\FrameworkFiles";

        /// <summary>
        /// For internal Visual Galaxy Framework Log File path
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// 
        /// <!-- Author 👨Tipplin👨-->
        internal static string VGFFrameworkLogFile = @"C:\Users\Project_Visual_Galaxy_Framework\Logs\SystemFramework\FrameworkLogFiles";

        /// <summary>
        /// 
        /// </summary>
        internal static string VGFWriteToInternalLogFile = @"C:\Users\Project_Visual_Galaxy_Framework\Logs\SystemFramework\VGFSystemLogFile";


        /// <summary>
        /// .NET Class Process, starts Application with Process.Start(appname) and more
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// With .NET 5.0 and Visual C# 9.0 can shorted 
        /// the Classname Constuctor auf ony new() - everytime new operator is on HEAP.
        /// <!-- Author 👨Tipplin👨 -->
        internal static Process process = new();


        

        

        /// <summary>
        /// .NET Class DirectoryInfo - Exists Dir...
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        ///  Class Instance
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// Class Directory
        /// pplies access control list (ACL) entries described by a System.Security.AccessControl.DirectorySecurity
        /// object to the directory described by the current System.IO.DirectoryInfo object.
        /// 
        /// directorySecurity:
        /// An object that describes an ACL entry to apply to 
        /// the directory described by the path parameter.
        /// SetAccessControl(DirectorySecurity directorySecurity);
        /// </remarks>
        internal static DirectoryInfo dr = new(VGFTraceFile);

        /// <summary>
        /// 
        /// </summary>
        internal static DirectoryInfo wl = new(VGFWriteToInternalLogFile);
        
        /// <summary>
        /// .NET Class StreamWriter - write into File
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// .Flush() write complete Block into File.
        /// .Flush() everytime before .Close() the File !.
        /// if not he close file, but nothing write into file!.
        /// DON'T FORGET .Close(); - if so, the File continue open and no access more and can block the System.
        /// Tipplin Tip: write .Close(); into try/catch block - finally
        /// finally is ultimate free resource, If Exception ot NOT !.
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// 
        /// </remarks>
        public StreamWriter sw = new(fs);

        /// <summary>
        /// .NET Class StreamReader - read from a File
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// 
        /// <!-- Author 👨Tipplin👨 -->
        public StreamReader sr = new(VGFTraceFile);

        /// <summary>
        /// .NET Class FileStream instance with instancevariable fs.
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// 
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// Provides a System.IO.Stream for a file, 
        /// supporting synchronous and asynchronous reads and writes.
        /// </remarks>
        internal static FileStream fs = new(VGFTraceFile, FileMode.OpenOrCreate | FileMode.Append);




        


        /// <summary>
        /// 
        /// </summary>
        internal static FileStream syslog = new(VGFWriteToInternalLogFile, FileMode.OpenOrCreate | FileMode.Append);

        /// <summary>
        /// .NET Class DateTime - Problem is USA to Europe here Germany, 
        /// USA last year make leap second minute have now 60 seconds not 59 - old 12:59:59 new 12:00:60 -> 12:01:00
        /// Problem by Windows Clock must be everytime syncronize the clock with Windows Time Server -> Option Time+Language
        /// Time Server: time.windows.com - every date check the Clock and time - Germany high different was 2 seconds.
        /// Tip Tipplin: install the PTB Clock (Atomclock) written in Javascript as Website:https://uhr.ptb.de/
        /// Class DateTime:
        /// IsLeapYear(int year)
        /// DaysInMonth(int year, int month);
        /// Show all Class Members with marked classname and push F12
        /// </summary>
        public static DateTime dt = new();

        /// <summary>
        /// Set static instance for Class WindowsIdentity for all other Classes and Methods.
        /// </summary>
        internal static WindowsIdentity id = WindowsIdentity.GetCurrent();

        /// <summary>
        ///  Set static instance for Class WindowsPrincipal for all other Classes and Methods.
        /// </summary>
        internal static WindowsPrincipal p = new(id);

        /// <summary>
        /// Set static instance for AssemblyInfo for current Assembly
        /// </summary>
        internal static VSLAssemblyInfo vai = new();



        /// <summary>
        /// 
        /// </summary>
        internal static DateTime Timestamp { get; private set; }

        /// <summary>
        /// 
        /// </summary>
        public static string VGFGetCurrentTime => Timestamp.ToString("hh:mm tt");


        // See new write for more constants with , commata and ; semicolon
        // one declared line, other constant and commata at end
        // last constant with semicolon

        internal static string Euro = "€",                 // Euro - europe
                               Dollar = "$",               // Dollar - usa
                               Ausdollar = "$",            // Australia dollar
                               Danmarkkronen = "dkr",      // Danmark kronen
                               Norwaykronen = "nkr";       // Norway kronen









        /// <summary>
        /// Individual StringBuilderBufferSize 
        /// always have a maximum size of Chararcters.
        /// Make sure, that the String is not higher/longer as the StringBufferSize is !.
        /// StringBuffers have an strong Value, not variable or maximum Capacity.
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// SizeCharSize is the static chars for an Buffersize:
        /// SizeChar1024 are 1024 chars in maxium StringBuilder and so...
        /// maximum chars is integer value: 2.147.483.647
        /// StandardBuilder sb = new 
        /// StringBuilder(StringBuilderBufferSize.SizeChar255, 
        /// StringBuilderBufferSize.SizeChar1024);
        /// sb.Capacity - StringBuilder automatic to highest value, 
        /// if the string is higher as 255 chars.
        /// -------------------------------------------------------------------
        /// StringBuilder standard is 16 chars internal set.
        /// StringBuilder sb = new StringBuilder();
        /// -------------------------------------------------------------------
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// Use only StringBuilder is 3000x faster as string,
        ///  own CACHE.
        /// Use for: Buffers, Sorted Methods, I/O Operations...
        /// </remarks>
        public enum VGFStringBuilderBufferSize
        {


            /// <summary>
            /// Buffersize 255 chars for StringBuider
            /// </summary>
            SizeChar255 = 0x200,

            /// <summary>
            /// Buffersize 1024 chars for StringBuider
            /// </summary>
            SizeChar1024 = 0x400,
            /// <summary>
            /// Buffersize 2048 chars for StringBuider
            /// </summary>
            SizeChar2048 = 0x800,
            /// <summary>
            /// Buffersize 4096 chars for StringBuider
            /// </summary>
            SizeChar4096 = 0x1000,
            /// <summary>
            /// Buffersize 8192 chars for StringBuider
            /// </summary>
            SizeChar8192 = 0x2000,
            /// <summary>
            /// Buffersize 16384 chars for StringBuider
            /// </summary>
            SizeChar16384 = 0x4000,
            /// <summary>
            /// Buffersize 32767 chars for StringBuider
            /// </summary>
            SizeChar32767 = 0x6000,
            /// <summary>
            /// Buffersize 65535 chars for StringBuider
            /// </summary>
            SizeChar65535 = 0x8000
        }

        /// <summary>
        /// Set capacity for Buffers, like C++ here with 255 
        /// </summary>
        /// <!-- Author Tipplin -->
        /// But is the given buffer capacity greather as 254 -1 no overflow!, StringBuilder he cut him!
        /// <!-- Author Tipplin -->
        internal static int capacity = 255 - 1;

        // set all instances in the Class Header, so we have global access to System Class/Object

        /// <summary>
        /// Class StringBuilder are 3000x faster as string.
        ///  StringBuilderCache
        /// </summary>
        /// <!-- Author 👨TIPPLIN👨 🧑-->
        /// Param capacity is an constant value 254 chars minus 1, minus 1 as safe to overflow!
        /// <!-- Author 👨TIPPLIN👨 🧑-->
        /// <remarks>
        /// NOW ! 
        /// but don't forget 'private' is degree of protection, no access!
        /// must set public for outside access. 
        /// </remarks>
        public StringBuilder sbb = new(capacity);

        /// <summary>
        /// StringBuilder expanded
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// String are slower as StringBuilder is very fast.
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// StringBuilder(minimum integer, maximum integer);
        /// he expand automatic to highest capacity !.
        /// -------------------------------------------------------------------
        /// NOW ! 
        /// but don't forget 'private' is degree of protection, no access!
        /// must set public for outside access.
        /// -------------------------------------------------------------------
        /// </remarks>
        public StringBuilder sb = new(255, 4096);

        /// <summary>
        /// Global in Project-Solution.
        /// StringBuilder here as expanded, minimum 255 chars and maximum 2048 chars,
        /// if minimum string is greather than 255, he expand to maximum automatic.
        /// So we have save, that he NOT cut the string after 255 chars.
        /// Standard StringBuilder set  16 chars without use expand.
        /// StringBuilder(min integer, max integer);
        /// StringBuilder is 2000x faster as string by sorted routines.
        /// Sorted Routines in System Directive: 
        /// System.Collections.Generic
        /// Class Stack
        /// Quicksort, Bubblesort...
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// For no  conflicts, I have set other instancevariables!.
        /// If conflict the compiler make message, before at left side yellow lamp.
        /// Visual C# Compiler runs "under the Hood", check syntax and semantics, make helps!
        /// if codeline ok!, he precompile the codeline directly, faster backend compile!.
        /// If search infos about Keywords and others, push F1 - goes Online to Website.
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// NOW ! 
        /// but don't forget 'private' is degree of protection, no access!
        /// must set public for outside access.
        /// while this set in Class-Head, so Global for all Classes and Methods...
        /// </remarks>
        public StringBuilder sbr = new(255, 2048);

        /// <summary>
        /// Set StringBuilder with Expand, minimum 255 chars and maximum 1024 chars.
        /// if string greather than 255 chars, he automatic expand to maximum!.
        /// </summary>        
        /// <!-- Author 👨Tipplin👨 -->
        /// 
        /// <!-- Author 👨Tipplin👨 -->
        public StringBuilder volname = new(255, 1024);

        /// <summary>
        /// Instancevariable fsname for native Operation System Function: GetVolumeInformation();
        /// </summary>        
        /// <!-- Author 👨Tipplin👨 -->
        /// 
        /// <!-- Author 👨Tipplin👨 -->
        public StringBuilder fsname = new(255, 1024);





        /// <summary>
        /// Check the License on this Computer
        /// <!-- Author 👨Tipplin👨 -->
        /// You can set Statements, Logs, Calls, Messages and Validation
        /// if class declare static, the Constructor same static, without not allowed!.
        /// <!-- Author 👨Tipplin👨 -->
        /// </summary>
        static VGFCore()
        {
            VGFStandardMessage1 = "Copyright © 2017-2021 by  Visual Galaxy Framework Community Kernel Developer Team.\n";
            VGFStandardMessage1 += "Copyright © 2017-2021 by Christian 'Tipplin' Kurs - Project-Founder and Main-Author\n";
            VGFStandardMessage1 += "Portions Copyright © 1982-2021 by Microsoft Corporation GmbH. \n";

            // Own MessageBox from Library: VFL.dll - native Library written in C/C++ - with Enumerator STYLES
            _ = VFLMsgBox(VGFStandardMessage1, "Visual Galaxy Framework - License", STYLES.OkOnly | STYLES.Information | STYLES.MsgBoxSetForeground | STYLES.SystemModal);
        }


        /// <summary>
        /// DON'T USE IT ! Experimental
        /// </summary>
        /// <returns></returns>
        internal static bool VGFExperimentalWinMethod1()
        {

            return false;


            /*
            private readonly static string baseString = @"Text";

        /// <summary>
        /// Unlimited string
        /// </summary>
        public readonly static string UnlimitedString;

        /// <summary>
        /// Static constructor
        /// </summary>
        static MessageString()
        {
            for (int counter = 0; counter < 35; counter++)
            {
                UnlimitedString += baseString;
            }
        }

        /// <summary>
        /// Limited version of the string
        /// </summary>
        public static string LimitedString =>
           UnlimitedString.Length > 65536
           ? UnlimitedString.Substring(0, 65535)
           : UnlimitedString;
    }


IntPtr result = IntPtr.Zero;

// Send 0x052C to Progman. This message directs Progman to spawn a 
// WorkerW behind the desktop icons. If it is already there, nothing 
// happens.
W32.SendMessageTimeout(progman, 
                       0x052C, 
                       new IntPtr(0), 
                       IntPtr.Zero, 
                       W32.SendMessageTimeoutFlags.SMTO_NORMAL, 
                       1000, 
                       out result);

            */
        }




        /// <summary>
        /// Internal Method VGFGetFrameworkVersionFromRegistry
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// 
        /// <!-- Author 👨Tipplin👨-->
        /// <remarks>
        /// Check the Frameworkversion on current Computer
        /// </remarks>
        /// <returns>
        /// True or False as string
        /// </returns>
        internal static string VGFGetFrameworkVersionFromRegistry()
        {
            const string subkey = @"SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\";

            using (var ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(subkey))
            {
                if (ndpKey != null && ndpKey.GetValue("Release") != null)
                {
                    VGFCheckFor45PlusVersion((int)ndpKey.GetValue("Release"));
                
                    return bool.TrueString;    
                }
                else
                {
                    return bool.FalseString;    
                }
            }

            // Checking the version using >= enables forward compatibility.

            
            static string VGFCheckFor45PlusVersion(int releaseKey)
            {
                if (releaseKey >= 600000)
                    return "5.0 or later";
                if (releaseKey >= 528040)
                    return "4.8 or later";
                if (releaseKey >= 461808)
                    return "4.7.2";
                if (releaseKey >= 461308)
                    return "4.7.1";
                if (releaseKey >= 460798)
                    return "4.7";
                if (releaseKey >= 394802)
                    return "4.6.2";
                if (releaseKey >= 394254)
                    return "4.6.1";
                if (releaseKey >= 393295)
                    return "4.6";
                if (releaseKey >= 379893)
                    return "4.5.2";
                if (releaseKey >= 378675)
                    return "4.5.1";
                if (releaseKey >= 378389)
                    return "4.5";
                // This code should never execute. A non-null release key should mean
                // that 4.5 or later is installed.
                return "No 4.5 or later version detected";
            }
        }


        /// <summary>
        /// Method VGFWaitSeconds
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// Method with optional pararmeters MessageText and MessageTitle,
        /// paramter milliseconds must be have an Value !.
        /// See in code asterics operator for an Call or 
        /// show MessageBox after Sleep an thread in milliseconds
        /// <!-- Author 👨Tipplin👨 -->
        /// <param name="milliseconds">Set milliseconds value</param>
        /// <param name="MessageText">Optional set Text for MessageBox</param>
        /// <param name="MessageTitle">Optional set Title for MessageBox</param>
        /// <remarks>
        /// Optional Parameters in C# - 
        /// string MessageText="" as null value, can be change in Call or in code.
        /// </remarks>
        public static void VGFWaitSeconds(uint milliseconds, string MessageText = "", string MessageTitle = "")
        {

            if (milliseconds <= 0 || milliseconds > 10000)
            {
                // Own MessageBox from Visual.Function.Library - native VFL.dll written in C/C++ - with Enumerator STYLES
                _ = VFLMsgBox("Arguments out of range !", "VGFWaitSeconds::Parameter:milliseconds", STYLES.OkOnly | STYLES.Exclamation | STYLES.MsgBoxSetForeground | STYLES.SystemModal);

                // Functions from Microsoft Standard C Library - in native msvcrt.dll 64BIT Library - 
                _ = NRMExit(EXIT_CODES.ERROR_BAD_ARGUMENTS);

            }
            // Check Optional Parameters, if the values are null ?
            else if (MessageText.Length == 0 || MessageTitle.Length == 0)
            {

                // Operator Asterix * is an uint uint.operator(uint left, uint right)
                // Sleep with Operator Asterix * for an Call or MessageBox show with Text and Title.
                // Sleep waitable with given milliseconds, after timeout than calls the Method, or show MessageBox
                Sleep(milliseconds * VFLMsgBox("undefine MessageText", "undefine MessageTitle", STYLES.OkOnly | STYLES.Information | STYLES.MsgBoxSetForeground | STYLES.SystemModal));
            }
            else
            {
                Sleep(milliseconds * VFLMsgBox(MessageText, MessageTitle, STYLES.OkOnly | STYLES.Information | STYLES.MsgBoxSetForeground | STYLES.SystemModal));
            }
        }


        /// <summary>
        /// Internal Method !
        /// </summary>
        /// <param name="LogFileIndex"></param>
        /// <!-- Author 👨Tipplin👨 -->
        /// DON'T USE THIS METHOD, ONLY FOR INTERNAL LOGGING.
        /// <!-- Author 👨Tipplin👨 -->
        internal static string VGFWriteToSystemLogFile(int LogFileIndex)
        {

            

            try
            {

                switch (LogFileIndex)
                {
                    case 1:
                        var logfile = new StreamWriter(fs);

                        logfile.WriteLine("LogDate: {0} - LogTime: {1}\n\n\n", dt.ToLongDateString(), dt.ToLongTimeString());
                        logfile.WriteLine("Username: {0}\n", Environment.UserName);
                        logfile.WriteLine("Computername: {0}\n", Environment.MachineName);
                        logfile.WriteLine("Description:\t {0}\n", vai.Description);
                        logfile.WriteLine("Event:\t {1}\n", vai.FileVersion);
                        logfile.WriteLine("Operation System:\t {0}\n", VOSInternalBase.VOSGetOperationSystemName());
                        logfile.WriteLine("Execute Platform: \t {0}\n", VOSInternalBase.VOSGetPlatformName());

                        // Write the full complete stream into logfile
                        // Flush() everytime before you close the File !!!.
                        // set Close() write nothing into File and close them !
                        // ignore Flush() then at last!
                        logfile.Flush();

                        // close the logfile
                        logfile.Close();
                        break;
                    case 2:
                        var logfile2 = new StreamWriter(fs);

                        logfile2.WriteLine("LogDate: {0} - LogTime: {1}\n\n", dt.ToLongDateString(), dt.ToLongTimeString());
                        logfile2.WriteLine("Username: {0}\n", Environment.UserName);
                        logfile2.WriteLine("Computername: {0}\n", Environment.MachineName);
                        logfile2.WriteLine("Description:\t {0}\n", vai.Description);
                        logfile2.WriteLine("Event:\t {1}\n", vai.FileVersion);
                        logfile2.WriteLine("Operation System:\t {0}\n", VOSInternalBase.VOSGetOperationSystemName());
                        logfile2.WriteLine("Execute Platform: \t {0}\n", VOSInternalBase.VOSGetPlatformName());

                        // the first everytime, before you close the file !
                        // write the full complete stream into logfile
                        logfile2.Flush();

                        // close the logfile
                        logfile2.Close();
                        break;
                    case 3:
                        var logfile3 = new StreamWriter(fs);

                        logfile3.WriteLine("LogDate: {0} - LogTime: {1}\n\n", dt.ToLongDateString(), dt.ToLongTimeString());
                        logfile3.WriteLine("Username: {0}\n", Environment.UserName);
                        logfile3.WriteLine("Computername: {0}\n", Environment.MachineName);
                        logfile3.WriteLine("Description:\t {0}\n", vai.Description);
                        logfile3.WriteLine("Event:\t {1}\n", vai.FileVersion);
                        logfile3.WriteLine("Operation System:\t {0}\n", VOSInternalBase.VOSGetOperationSystemName());
                        logfile3.WriteLine("Execute Platform: \t {0}\n", VOSInternalBase.VOSGetPlatformName());

                        // the first everytime, before you close the file !
                        // write the full complete stream into logfile
                        logfile3.Flush();

                        // close the logfile
                        logfile3.Close();
                        break;
                }
                return bool.TrueString;
            }
            catch (SystemException ex) when (ex is IOException | ex is ArgumentException)
            {
                var wif = new StreamWriter(syslog);

                wif.WriteLine("LogDate: {0} - LogTime: {1}\n\n", dt.ToLongDateString(), dt.ToLongTimeString());
                wif.WriteLine("Username: {0}\n", Environment.UserName);
                wif.WriteLine("Computername: {0}\n", Environment.MachineName);
                wif.WriteLine("Exceptionmessage: {0}\n", ex.Message);
                wif.WriteLine("Exceptionsource: {0}\n", ex.Source);
                wif.WriteLine("ExceptionHRESULT: {0}\n\n", ex.HResult);

                wif.Flush();
                wif.Close();

                // boolean as string, returned true or false as string
                return bool.FalseString;
            }
        }


        /// <summary>
        ///  USE
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// Lock Application, means the User can't close the Application,
        /// an I/O Operation is now running, most by multi threads on 64BIT System on multiple CPUkernels
        /// CPUKernel starts by 0 to 64, but don't use CPUKernel 0 is the Operation System.
        /// GPUKernels for calculation, financial calculation, GPUKernel 1000 faster as the CPU.
        /// Move the Operation from CPU to GPU and return.
        /// <!-- Author 👨Tipplin👨 -->
        /// <returns>
        /// boolean as string true or false
        /// </returns>
        public static string VGFLockApplication()
        {
            try
            {
                //VGFApplicationLockRunningOperation(true);
                
                
                // Event logging into System Log File
                // VGFLogFileNames.ElementAt(1).ToString();

                return bool.TrueString;
            }
            catch (ApplicationException ex)
            {
                _ = VFLMsgBox(ex.Message, ex.Source, STYLES.OkOnly | STYLES.Exclamation | STYLES.MsgBoxSetForeground | STYLES.SystemModal);
                return bool.FalseString;

            }
        }

        /// <summary>
        /// Get NetBIOS-Computername
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// use here  Class SystemInformation from .NET Framework 4.8.03752
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// ---------------------------------------------------------------------
        /// Use Class SystemInformation from 
        /// namespace System.Windows.Forms,
        /// here are more then 300 Classes for use!.
        /// ---------------------------------------------------------------------
        /// Tip: Make your own Webbrowser
        /// Class Webbrowser...
        /// Create Form - Allows the user to navigate to web pages within a form.
        /// Method GoBack():
        /// Causes the System.Windows.Forms.WebBrowser control 
        /// to navigate to the previous page (if any) in the navigation history.
        /// ---------------------------------------------------------------------
        /// </remarks>
        /// <returns>
        /// 
        /// </returns>
        internal string VGFComputerName()
        {

            return Environment.MachineName;
        }

        /// <summary>
        ///  Send directly to Author via URL
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        ///  
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// If any Problem or Exception in codeparts, 
        /// we can send later directly to Author on Website/Webserver or GitHub Connect.
        /// </remarks>
        /// <returns>
        /// 
        /// </returns>
        public static string VGFToAuthorDirectly()
        {
            return VGFCoreUrls.VGFdevTipplinKernelTeam.OriginalString;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// NOTE: Microsoft Webbrowser Edge 
        /// now standalone Application for start directly !
        /// See in Code the current Directory!
        /// or start with Command Line Tool Console:
        /// start msedge
        /// start is an Console app, can start JOBS.
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// 
        /// </remarks>
        /// <returns>
        /// 
        /// </returns>
        public static string VGFWebSiteCommunityInvestigativ()
        {
            try
            {
                // Microsoft Edge Webbrowser is now an standalone Application with directly call / start.
                // Start Process with Microsoft Edge Webbrowser and given Website as Original String
                // string microsoft-edge:websitename or URL
                // our Website Community Investigativ
                Process.Start(@"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe" + VGFCoreUrls.VGFCommunityInvestigativ.OriginalString);

                // true normally give 1 returned, here set bool.ToString give turned True or False as literal string
                // but must change bool in Method-declaration into string as returned datatype.
                return true.ToString();
            }
            catch (InvalidOperationException ex)
            {
                _ = VFLMsgBox(ex.Message, ex.Source, STYLES.OkOnly | STYLES.Exclamation | STYLES.MsgBoxSetForeground | STYLES.SystemModal);
                return false.ToString();
            }



        } // END_OF_METHOD::VGFWebSiteCommunityInvestigativ

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static string VGFWebSiteCommunityHelp()
        {

            try
            {
                // Start Process with Microsoft Edge Webbrowser and given Website as Original String
                // string microsoft-edge:websitename or URL
                // Our Website Community Helpful & Respectful
                Process.Start(@"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe" + VGFCoreUrls.VGFCommunityHelp);

                // true normally give 1 returned, here set bool.ToString give turned True or False as literal string
                // but must change bool in Method-declaration into string as returned datatype.
                return true.ToString();
            }
            catch (InvalidOperationException ex)
            {
                _ = VFLMsgBox(ex.Message, ex.Source, STYLES.OkOnly | STYLES.Exclamation | STYLES.MsgBoxSetForeground | STYLES.SystemModal);
                return false.ToString();
            }
        } // END_OF_METHOD::VGFWebSiteCommunityHelp

        /// <summary>
        /// Start Microsoft Webbrowser EDGE
        /// </summary>
        /// <returns>
        /// boolean string - True/False as string return.
        /// </returns>
        public static string VGFStartEdgePure()
        {

            try
            {
                // Start Process with Microsoft Edge Webbrowser and given Website as Original String
                // string microsoft-edge:websitename or URL
                // Our Website Community Helpful & Respectful
                Process.Start(@"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe");

                // true normally give 1 returned, here set bool.ToString give turned True or False as literal string
                // but must change bool in Method-declaration into string as returned datatype.
                return true.ToString();
            }
            catch (InvalidOperationException ex)
            {
                _ = VFLMsgBox(ex.Message, ex.Source, STYLES.OkOnly | STYLES.Exclamation | STYLES.MsgBoxSetForeground | STYLES.SystemModal);
                return false.ToString();
            }

        }




        /// <summary>
        ///  Method ToUserDirectlyReturned
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        ///  everytime HIDDEN in this Codepart.
        /// <!-- Author 👨Tipplin👨 -->
        /// <param name="User"></param>
        /// <remarks>
        /// 
        /// </remarks>
        /// <returns>
        /// 
        /// </returns>
        public static string VGFToUserDirectlyReturned(string User)
        {
            // Class System.Web
            // HTTP PostedFile, update file with Fixes.
            // or
            // as Remote Email with .zip file.

            return User;
        }

        // String Helper

        /// <summary>
        /// Left of string
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// 
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// NOTE: Arrary's always begin with index 0
        /// </remarks> 
        /// <param name="source"></param>
        /// <param name="c"></param>
        /// <remarks>
        /// 
        /// </remarks>
        /// <returns>
        /// 
        /// </returns>
        public static string VGFLeftOf(string source, char c)
        {
            string ret = source;

            int idx = source.IndexOf(c);

            if (idx != -1)
            {
                ret = source.Substring(0, idx);
            }

            return ret;

        } // end of method::LeftOf


        /// <summary>
        /// Start Microsoft Main Website directly
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// 
        /// <!-- Author 👨Tipplin👨 --> 
        /// <returns>
        /// 
        /// </returns>
        public static bool VGFStartMicrosoftWebSite()
        {

            /*
             * 
             * try / catch / finally block
             * 
             * (finally is the ultimate resource free, if Exception or NOT !.
             *  cleanup all Windows Handles, Windows Resources, TWAIN-Scanner-Interface-Connect(if no disconnect, everytime open but access!) 
             *  close Files,
             *  
             *  )
             * 
             * 
             * catch (SystemException ex)when(ex is InvalidOperationException || ex is Win32Exception || ex is FileNotFoundException)
             * 
             * see new Exception with Operator || for more then one Exception Type, like Java Exceptions
             * 
             * or
             * 
             * return ex is NullReferenceException ||
             *        ex is StackOverflowException ||
             *        ex is OutOfMemoryException   ||
             *        ex is System.Threading.ThreadAbortException ||
             *        ex is System.Runtime.InteropServices.SEHException ||
             *        ex is System.Security.SecurityException;
             *
             *        
             *        
             */





            try
            {
                /* 
                 * Start Process/Thread with given Pathname and executable file .exe and start it direct!
                 * @ is a unicode sign, here for slashes \ backward slash, without  \\ (forward slash /)
                 * all unicode sign stand over Unicode Organization - www.unicode.org -
                 * 
                 * Unicode Handbook Version 12.0 at 05.03.2019
                 * For Germany, Autriche, Switzerland "German Umlauts".
                 * 
                 * For English Persons give english paper for "German Umlauts" by DIN-Norm (Deutsche Normierung)
                 * 
                 * Windows 10 Update 2020/2021 - with new coding by Windows Editor by save under.
                 * Windows 10 Editor want save the Files with own .suffix (limit 255 chars), so go this way:
                 * Filename - insert your own Filename
                 * Filetype - choice all Files
                 * Coding - UTF8
                 * While Windows 10 New Filesystem - Assocation with Filename (Prefix) and Suffixes
                 * means! set suffix to any application or filetype
                 * .dllfile = dll 
                 * .dllfile is an assembly DLL, is a little secure.
                 * set this with System-Tool assoc.exe on command line.
                 * 
                 * .accdb=Access.Application.16 is the new Database Microsoft Access Format .suffix .accdb
                 * (Microsoft Access Limit 255 Users, Database Size: )
                 * 
                 * (Microsoft SQL Server Limit x Users, Database Size: 535 Tebibyte - Tera binary byte (Terabyte is wrong))
                 * (Microsoft SQL Server Community Edition the same as Enterprise (Commerial) free download)
                 * 
                 * Microsoft SQL Server 2019 with:
                 * --------------------------------------------------------------------------------------------------------------------
                 * Apache Spark™ ist eine einheitliche Analyse-Engine für groß angelegte Datenverarbeitung. 
                 * Can run Spark Job's.
                 * 
                 * HDFS - Hadoop Distributed File System (HDFS) - Apache Hadoop
                 * The Apache™ Hadoop® project develops open-source software for reliable, scalable, distributed computing.
                 * The Apache Hadoop software library is a framework that allows for the distributed processing of large data sets 
                 * across clusters of computers using simple programming models. 
                 * It is designed to scale up from single servers to thousands of machines, 
                 * each offering local computation and storage. 
                 * Rather than rely on hardware to deliver high-availability, 
                 * the library itself is designed to detect and handle failures at the application layer, 
                 * so delivering a highly-available service on top of a cluster of computers, each of which may be prone to failures.
                 * 
                 * 
                 * 
                 * (IBM Db2 Developer Community Edition - after IBM Account free download)
                 * (Embacadero Interbase Community Edition - free download)
                 * (same Delphi and C++ Compiler and Builder - free download)
                 * 
                 * ------------------------------------------------------------------------------------------------------
                 * NEW in Microsoft Editor - Windows 10 OS-Build 18632 Fix
                 * ------------------------------------------------------------------------------------------------------
                 * UTF-8 with BOM (Byte Order Mark),
                 * ----------------------------------------------
                 * UTF-16 LE - Little Endian
                 * If the 16-bit units use little-endian order, 
                 * the BOM will appear in the 
                 * sequence of bytes as 0xFF 0xFE
                 * ----------------------------------------------
                 * UTF-16 BE - Big Endian
                 * If the 16-bit units are represented in 
                 * big-endian byte order, the BOM will appear 
                 * in the sequence of bytes as 0xFE 0xFF
                 * ----------------------------------------------
                 * and Ansi, UTF8 - remove Unicode and 
                 * Big Endian from Editor Coding.
                 * The Byte Order Mark (BOM) 
                 * is a Unicode character, 
                 * U+FEFF BYTE ORDER MARK (BOM), 
                 * whose appearance as a magic number at the 
                 * start of a text stream can signal several 
                 * things to a program reading the text:[1] 
                 * The byte order, or endianness, 
                 * of the text stream;
                 * ----------------------------------------------
                 * The fact that the text stream's encoding is Unicode, to a high level of confidence;
                 * Which Unicode encoding the text stream is encoded as.
                 * BOM use is optional.
                 * 
                 * Its presence interferes with the use of UTF-8 by software that does not 
                 * expect non-ASCII bytes at the start of a file but that could otherwise handle the text stream. 
                 * Unicode can be encoded in units of 8-bit, 16-bit, or 32-bit integers. 
                 * For the 16- and 32-bit representations, a computer receiving text from arbitrary sources 
                 * needs to know which byte order the integers are encoded in.
                 * 
                 * The BOM is encoded in the same scheme as the rest of the document and 
                 * becomes a non-character Unicode code point if its bytes are swapped. 
                 * 
                 * Hence, the process accessing the text can examine these first few bytes to determine the endianess, 
                 * without requiring some contract or metadata outside of the text stream itself. 
                 * 
                 * Generally the receiving computer will swap the bytes to its own endianess, 
                 * if necessary, and would no longer need the BOM for processing. 
                 * The byte sequence of the BOM differs per Unicode encoding
                 * (including ones outside the Unicode standard such as UTF-7, see table below), and 
                 * none of the sequences is likely to appear at the start of text streams stored in other encodings. 
                 * 
                 * Therefore, placing an encoded BOM at the start of a text stream can indicate 
                 * hat the text is Unicode and identify the encoding scheme used. 
                 * This use of the BOM character is called a "Unicode signature".
                 * 
                 * 
                 * Next New Windows 10 - Open Branch - 2020 more Unicode .
                 * emoij's, kat-emoij's with chat symbols, symbols.
                 * OS-Build at Time 18875 - 2020 - 20H1 - on FlightHub.
                 * 
                 * 
                 * All New Projects in Visual Studio 2019 Version 16.0.3 saved with -UTF16- .csproj....
                 * UTF-16  by Common Language Runtime In/Out Operations.
                 * 
                 * ------------------------------------------------------------------------------------
                 * International System of SI Units from 20 May 2019 comes into force.
                 * International Bureau for Measurement and Weights in Paris.
                 * ------------------------------------------------------------------------------------
                 * means Ade basis-units, Welcome natural constants !.
                 * New Definition for:
                 * Ampere, Kelvin, Mol, Candela, Second, Meter, Kilogram.
                 * 
                 * 
                 * 
                 * ------------------------------------------------------------------------------------
                 * TipplinTIP: 
                 * In our Documentation, Whitepaper from Dr. Knittel -CBM- English Translation for this.
                 * 
                 * ---------------------------------------------------------wuri as constant uri string
                 * ---------------------------------------------------------set instance with Class Uri
                 * ---------------------------------------------------------.Original String call 
                 */

                // Start Process with Microsoft Edge Webbrowser and given Website as Original String by Class URI in namespacw System.
                Process.Start("microsoft-edge:" + VGFCoreUrls.Wuri.OriginalString);
            }
            // if the Process does't start, throw Excepetionhandler
            // new writing with Operator || double vertical bar, like Java Exceptions
            // Process.Start have four Exceptions.
            catch (SystemException ex) when (ex is InvalidOperationException || ex is Win32Exception || ex is FileNotFoundException)
            {
                // I have written for .NET the good old MessageBox with intellisense window by STYLES
                VFLMsgBox(ex.Message, ex.Source, STYLES.OkOnly | STYLES.Critical | STYLES.MsgBoxSetForeground | STYLES.SystemModal);
                return false;
            }
            return true;

        } // end of Method::VGFStartMicrosoftWebSite

        /// <summary>
        /// Start GitHub Projectsite
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// 
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// Change bool to string, is bool.ToString()
        /// while returned bool as string literal,
        /// True or False as string.
        /// </remarks> 
        /// <remarks>
        /// 
        /// </remarks>
        /// <returns>
        /// returned true or false as Literal String True/False
        /// </returns>
        public static string VGFStartGitHubProjectSite()
        {
            try
            {
                // Start Process with Microsoft Edge Webbrowser and given Website as Original String
                // string microsoft-edge:websitename or URL
                Process.Start("microsoft-edge:" + VGFCoreUrls.VGFdevTipplinGitHub);

                // true normally give 1 returned, here set bool.ToString give turned True or False as literal string
                // but must change bool in Method-declaration into string as returned datatype.
                return true.ToString();
            }
            catch (InvalidOperationException ex)
            {
                _ = VFLMsgBox(ex.Message, ex.Source, STYLES.OkOnly | STYLES.Exclamation | STYLES.MsgBoxSetForeground | STYLES.SystemModal);
                return false.ToString();
            }

        } // end of Method::VGFStartGitHubProjectSite

        /*

         static bool VGFIsInRole(string Role)
        {
            //return Principal.IsInRole(Role);



        }

        /// <summary
        /// Callback method for the OnOperationStart event.
        /// </summary
        public static void CountOperationCalls(ICallable op, IApplyData data)

        {

            if (_operationsCount.ContainsKey(op))

            {

                _operationsCount[op]++;

            }

            else

            {

                _operationsCount[op] = 1;

            }

        }

        */

        /// <summary>
        /// Current User Is Administrator
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// Both instance in Class-Head !.
        /// Class WindowsPrincipal
        /// Class WindowsIdentity
        /// p is the instancevariable with member is class.
        /// But note WindowsBuiltInRole is an Enumerator ! no class,
        /// so must set in ().
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// Visual C#
        /// Change bool to string by return, is bool.ToString()
        /// while returned bool as string literal,
        /// True or False as string.
        /// </remarks>
        /// <returns>
        /// Windows 10 Operation System have then 9 Roles in Windows Membership,
        /// System-Tool-command: net localgroup - commandline
        /// 
        /// * Administratoren
        /// * Benutzer
        /// * Distributed COM-Benutzer
        /// * Ereignisprotokollleser
        /// * Gäste
        /// * Hauptbenutzer
        /// * Hyper-V-Administratoren
        /// * IIS_IUSRS
        /// * Kryptografie-Operatoren
        /// * Leistungsprotokollbenutzer
        /// * Leistungsüberwachungsbenutzer
        /// * Netzwerkkonfigurations-Operatoren
        /// *
        /// * PVGF - Project Visual Galaxy Framework - Benutzerverwaltung
        /// * angelegt im System-tool netplwiz.exe unter Benutzer und Gruppe.
        /// * netplwiz.exe mit Windows 10 Web Password Tresor all your Web Password are saved.
        /// *
        /// * Remotedesktopbenutzer
        /// * Remoteverwaltungsbenutzer
        /// * Replikations-Operator
        /// * Sicherungs-Operatoren
        /// * Ssh Users
        /// * System Managed Accounts Group
        /// * WmsOperators
        /// * Zugriffssteuerungs-Unterstützungsoperatoren
        /// </returns>
        public static bool VGFIsAdmin()
        {
            // p as class instance holder, define in Class Head as static for all others.
            // IsInRole as bool, so returns 0 or 1, but with convert .ToString he returns True or False as string
            return p.IsInRole(WindowsBuiltInRole.Administrator);
        }

        /// <summary>
        /// Is User
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// ! NOTE ! User has no all Rights on Computer as the Administrator.
        /// Windows 10 make sure same Folders, User can't open it !.
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// Change bool to string, is bool.ToString()
        /// while returned bool as string literal,
        /// True or False as string.
        /// normally 0 or 1 as return.
        /// </remarks> 
        /// <returns>
        /// 
        /// </returns>
        public static bool VGFIsUser()
        {
            return p.IsInRole(WindowsBuiltInRole.User);
        }

        /// <summary>
        /// Is Guest
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// Guest have no rights, same Guest Roles can set in Windows 10.
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// Change bool to string, is bool.ToString()
        /// while returned bool as string literal,
        /// True or False as string.
        /// </remarks> 
        /// <returns>
        /// 
        /// </returns>
        public static bool VGFIsGuest()
        {
            return p.IsInRole(WindowsBuiltInRole.Guest);
        }

        /// <summary>
        /// Account Operator can add User to System with new Account,
        /// Administrator same, Users and Groups.
        /// While Windows 10 Professional is an Multi User System,
        /// one User or more on one Computer/PC.
        /// Windows 10 Professionl have  Database 'Resent',
        /// for Services, Recovery,
        /// Limit Database size 16 Terabyte. (MS SQL Server 2017 524 Terabyte.)
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// 
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// 
        /// </remarks>
        /// <returns>
        /// 
        /// </returns>
        public static bool VGFIsAccountOperator()
        {
            return p.IsInRole(WindowsBuiltInRole.AccountOperator);
        }

        /// <summary>
        /// Backup Operator can make Backup, full.
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// 
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// 
        /// </remarks> 
        /// <returns>
        /// 
        /// </returns>
        public static bool VGFIsBackupOperator()
        {
            return p.IsInRole(WindowsBuiltInRole.BackupOperator);
        }

        /// <summary>
        /// Replicator Operator can make File Replications.
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// File Replication in domain
        /// <!-- Author 👨Tipplin👨 -->
        /// 
        /// <returns>
        /// NOTE: returned True or False as string
        /// </returns>
        public static bool VGFIsReplicatorOperator()
        {
            return p.IsInRole(WindowsBuiltInRole.Replicator);
        }

        /// <summary>
        /// System Operator manage particular computer.
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// particular computer settings
        /// <!-- Author 👨Tipplin👨 -->
        /// <returns>
        /// 
        /// </returns>
        public static bool VGFIsSystemOperator()
        {
            // returned bool as string True or False !
            return p.IsInRole(WindowsBuiltInRole.SystemOperator);
        }

        /// <summary>
        /// Print Operator can take control of Printer
        /// </summary>
        /// <!-- Author 👨Tipplin👨  -->
        /// manage Printer or Printers in Network.
        /// <!-- Author 👨Tipplin👨  --> 
        /// <returns>
        /// 
        /// </returns>
        public static bool VGFIsPrintOperator()
        {
            return p.IsInRole(WindowsBuiltInRole.PrintOperator);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns>
        /// NOTE: bool true or false here returned as string True or False
        /// Method-declaration set string, not bool !.
        /// </returns>
        internal static string VGFUseFeatureMethod()
        {
            if (VGFRegisteredUser() == false)
            {
                return false.ToString();
            }
            else
            {
                return true.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        internal static bool VGFRegisteredUser()
        {
            /*
             * Registry prüfen, ob Methode benutzt werden darf, 
             * nur registierte Benutzer !.
             * 
             */
            return false;
        }


    } // END_OF_CLASS::VGFCore


    /// <summary>
    /// Class VGFCoreUrls 
    /// </summary>
    /// <!-- Author 👨Tipplin👨 -->
    /// same defined complete URL's for Websites.
    /// <!-- Author 👨Tipplin👨 -->
    public static class VGFCoreUrls
    {
    
        /// <summary>
        /// Uri Microsoft Website🌀
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// Class Uri form namespace System
        /// NOTE: without accessmofi public, all private with degree of protection,
        /// private now is standard in Visual C# without set.
        /// no access from outside.
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// @ unicode sign, so only one slash !
        /// 
        /// See Microsoft have change the dir for Webbrowser Edge and inside works the Chromium Engine,
        /// New is the Translator for Languages, so you can translate Websites and others.
        /// New is Virus Scan for all Download Files, TAB Downloads View, cancel Donwload,
        /// 
        /// C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe
        /// 
        /// Process.Start(@"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe", wuri.OriginalString);
        /// 
        /// wuri.OrignalString is the string for the Website Microsoft in German.
        /// </remarks>
        public static Uri Wuri = new("https://www.microsoft.com/de-de/");

        /// <summary>
        /// Microsoft TV Channel 9 with many Video's for all Developer.
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// Uri's as constant for OrginalString
        /// 
        /// Attention ! 
        /// without access modifier set internal private with degree of protection, 
        /// no external access.
        /// Either internal or public take.
        /// have forgotten by static uri... access modi public.
        /// 
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// 
        /// </remarks>
        public static Uri Wuri1 = new("https://channel9.msdn.com/");


        /// <summary>
        /// Our secure 📬mailbox for anonymous messages in case 
        /// of rule violations our 🚻 Community Members.
        /// </summary>
        public static Uri VGFCommunityInvestigativ = new("https://vgfc.org/community/investigativ");

        // &, () is not allwoed in XML Comment Block set +

        /// <summary>
        /// Community Helpful+Respectful
        /// </summary>
        public static Uri VGFCommunityHelp = new("https://vgfc.org/community/helpfulrespectful");

        /// <summary>
        /// Website to 👨Tipplin👨 by Project Visual Galaxy Framework
        /// </summary>
        public static Uri VGFdevTipplinGitHub = new("https://github.com/Tipplin/VGF");

        /// <summary>
        /// Website to 👨Tipplin👨 by VGF Community
        /// </summary>
        public static Uri VGFdevTipplinCommunity = new("https://vgfc.org/community/open");

        /// <summary>
        /// Website to VGF KernelTeam by 👨Tipplin👨
        /// </summary>
        public static Uri VGFdevTipplinKernelTeam = new("https://vgfc.org/community/kernelteam/Tipplin");

        /// <summary>
        /// Website to VGF KernelTeam by 🦁Tiger🦁
        /// </summary>
        public static Uri VGFdevTigerKernelTeam = new("https://www.vgfc.org/community/kernelteam/tiger");



        /// <summary>
        ///  Tipplin E-mail adress for send mail to me!
        /// </summary>
        /// <!-- Author 👨Tipplin👨  -->
        /// Base E-mail-adress
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// For E-Mail Method directly to me as Author.
        /// -------------------------------------------------------------------
        /// For Developer:
        /// -------------------------------------------------------------------
        /// All defined Attribute's, 
        /// all Attribute have the full set of regular expressions:
        /// so you can check/proof the given value/string.
        /// 
        /// namespace System.ComponentModel.DataAnnotations
        /// 
        /// CreditCardAttribute - Mastercard, Visa, American express card
        /// (Visa is first one the World.)
        /// EmailAddressAttribute - check email adress - allowed/not allowed characters
        /// MinLengthAttribute - set the minimum length of a string
        /// MaxLengthAttribute - set the maxnimum length of a string
        /// PhoneAttribute 
        /// UrlAttribute 
        /// RangeAttribute 
        ///
        /// </remarks>
        public static Uri VGFdevTipplinMail = new("kurschristian@gmail.com");

        /// <summary>
        /// Constant String for start Webbrowser Microsoft Edge directly,
        /// Microsoft-Edge official start the Webbrowser Edge:
        /// Microsoft-Edge:websitename
        /// by start with Process.Start(MSEdge, website);
        /// </summary>
        /// <!-- Author 👨Tipplin👨 -->
        /// NOTE: direct call is different to Internet Explorer,
        /// or under console the command start:
        /// start is an new console window, without start an new Window while
        /// start Website directly:
        /// start microsoft-edge:http://www.microsoft.com
        /// <!-- Author 👨Tipplin👨 -->
        /// <remarks>
        /// In Windows 10 Build 10000, Microsoft Edge Web Browser 
        /// with Chrominum Engine have new place in Directory:
        /// C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe
        /// direct call msedge at search or console with start msedge or
        /// go into dir click on msedge.exe.
        /// </remarks>
        internal static string MSEdge = @"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe";



    }  // END_OF_CLASS::URLS
} // END_OF_NAMESPACE::Visual.Galaxy.Framework
